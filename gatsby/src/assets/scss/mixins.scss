/////////////////////
// Mixins

/// Mixin - Set Link Colors & Decoration
/// @param $link
/// @param $hover
/// @param $deco
/// @param $deco--hover
@mixin a-link($link: $mule-fawn, $hover: $ebony-clay) {
  &:link,
  &:visited {
    color: $link;
    text-decoration: none;
    border-bottom: 1px dashed $link;
    text-shadow: none;
    background-image: none;
  }
  &:hover,
  &:focus,
  &:active {
    color: $hover;
    background-color: rgba($hover, 0.05);
    border-bottom: 1px solid $hover;
  }
}

/// Mixin - Set Other Link Colors & Decoration
/// @param $link
/// @param $hover
/// @param $deco
/// @param $deco--hover
@mixin a-other($link: $mule-fawn, $hover: $ebony-clay) {
  &:link,
  &:visited {
    color: $link;
    text-decoration: none;
    text-shadow: none;
  }
  &:hover,
  &:focus,
  &:active {
    color: $hover;
  }
}

/// Mixin - Fluid Type.
/// PRECISE CONTROL OVER RESPONSIVE TYPOGRAPHY FOR SASS
/// Indrek Paas @indrekpaas
/// Inspired by Mike Riethmuller's Precise control over responsive typography
/// @link http://madebymike.com.au/writing/precise-control-responsive-typography/
/// @param $properties
/// @param $min-vw
/// @param $max-vw
/// @param $min-value
/// @param $max-value
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(
          #{$min-value} +
            #{strip-unit($max-value - $min-value)} *
            (100vw - #{$min-vw}) /
            #{strip-unit($max-vw - $min-vw)}
        );
      }
    }

    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

/// Mixin - Strip unit
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// Mixin - Center.
/// Center an element vertically or horizontally in its container,
/// and optionally horizontally. Option to undo.
/// @param $horizonally-center - center horizontally
/// @param $vertically-center - center vertically
/// @param $absolute-positioning - position absolutely, rather than relatively
/// @param $undo - undo vertical centering on an element it was previously applied to
@mixin center(
  $horizontally: true,
  $vertically: true,
  $absolute: false,
  $undo: false
) {
  display: inline-block;
  @if ($absolute) {
    position: absolute;
  } @else {
    position: relative;
  }
  @if ($horizontally == true and $vertically == true) {
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
  }

  @if ($vertically == true and $horizontally == false) {
    top: 50%;
    transform: translateY(-50%);
  }

  @if ($horizontally == true and $vertically == false) {
    left: 50%;
    transform: translateX(-50%);
  }

  @if ($undo) {
    position: static;
    left: auto;
    transform: none;
  }
}

/// Mixin - Font-Size.
/// Adds px value for fallback - then rem value
/// use example =   @include font-size(1.6); = 1.6rem / 16px

@mixin font-size($sizeValue: 1.6) {
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

/// Mixin - Clearfix.
/// Adds clearfix based on http://bourbon.io/docs/#clearfix
/// use example =   @include cleafix

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

/// Mixin - list-reset
/// Reset list item defaults when no margin, padding, list styles needed

@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}

/// Mixin - With Icon
/// Precede Text with SVG icon
@mixin with-icon {
  background-size: cover;
  content: "";
  display: inline-block;
  margin-right: 0.1em;
  padding: 0.8em;
}

/// Mixin - Icon with circular bg
/// Mixin for the circular icon-bg (see source/patterns/01-atoms/headings for usage)
@mixin icon-bg($color: $black) {
  background-color: $color;
  border-radius: 20px;
  margin-right: 0.4em;
}

/// Mixin - Outer container
/// Outer container mixin for large screens
@mixin outer-container {
  margin: 0 auto;
  max-width: 68.5em;
  @include clearfix;
}

/// Mixin - More Link
/// Used in a number of views
@mixin more-link {
  a {
    @include font-size(0.9);
    font-weight: 600;
    text-decoration: none;

    &::before {
      content: "»";
      font-size: 1.2rem;
      margin-right: 0.2em;
    }
  }
}

/// Mixin - Back Link
/// Used in a number of views
@mixin back-link {
  display: block;
  @include font-size(0.9);
  font-weight: 600;
  text-decoration: none;

  &::before {
    content: "«";
    font-size: 1.2rem;
    margin-right: 0.2em;
  }
}

/// Mixin - Body Copy
@mixin body-copy {
  @include font-size(1.2);

  line-height: 1.6em;
}

// Maintain consistent ratio.
// Reference: http://codepen.io/jakob-e/pen/LEdWNB.
// Example to use aspect ratio.
//.example {
//  @include aspect-ratio(16, 9);
// ...or by simple ratio...
// @include aspect-ratio(1.777777778);
//}
@mixin aspect-ratio($ratio-or-width, $height: null) {
  $padding: if(
    $height,
    percentage($height/$ratio-or-width),
    percentage(1 / $ratio-or-width)
  );
  &:before {
    content: "";
    float: left;
    padding-bottom: $padding;
  }
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Gradient background.
$granny-smith: rgba(132, 157, 154, 1);
$granny-light: lighten($granny-smith, 80%);
@mixin granny-background {
  transition: all 0.5s ease-in;
  background: $granny-smith;
  background: -moz-radial-gradient(
    center,
    ellipse cover,
    $granny-light 20%,
    $granny-smith 100%
  );
  background: -webkit-radial-gradient(
    center,
    ellipse cover,
    $granny-light 20%,
    $granny-smith 100%
  );
  background: radial-gradient(
    ellipse at center,
    $granny-light 20%,
    $granny-smith 100%
  );
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#d9e8e6', endColorstr='#849d9a', GradientType=1);
}

// Fade to black background.
@mixin fade-to-black {
  background: -moz-linear-gradient(
    top,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.7) 100%
  );
  background: -webkit-linear-gradient(
    top,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.7) 100%
  );
  background: linear-gradient(
    to bottom,
    rgba(0, 0, 0, 0) 0%,
    rgba(0, 0, 0, 0.7) 100%
  );
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#00000000', endColorstr='#b3000000',GradientType=0 );
}

// Hide text.

@mixin hidetext {
  overflow: hidden;
  text-indent: 101%;
  white-space: nowrap;
}

// Shadow.

@mixin shadow {
  filter: "progid:DXImageTransform.Microsoft.Dropshadow(OffX=12, OffY=12,Color='#444')";
  filter: url(#drop-shadow);
  -webkit-filter: drop-shadow(9px 1px 6px rgba(0, 0, 0, 0.3));
  filter: drop-shadow(9px 1px 6px rgba(0, 0, 0, 0.3));
}

/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}

// Usage.
/*
.selector {
  @include prefix((
    column-count: 3,
    column-gap: 1.5em,
    column-rule: 2px solid hotpink
  ), webkit moz);
} */

// See list: https://www.w3schools.com/cssref/css3_browsersupport.asp
